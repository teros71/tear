TODO:

Add handling of recursive shape lists:
- shape list handlings:
  - colour appliance is almost ok. In general, appliance should be decided
    by the algorithm, not the list structure itself.
  - how are shapes spread
    - currently spreading is targeted for each individual shape
    - need to be able to position the list as a whole?
  - how angle works for lists?
    - how about vector field?
  - maybe add count for shape lists and a cumulative count also?
  - maybe mark a shapelist to be a leaf = no recursive applying?
  - appearance inheritance of list shapes?
  - parametrize tear algorithm to mark what is the leaf?
  - need for "save" operation for generated shapes? Like e.g. generate scaled
    areas to be used for spreading different objects later.

- add non-linear possibilities:
  - spread shapes non-evenly to an area
  - spread shapes non-evenly to a path
- do stuff according to position:
  - scale
  - adjust colour (in one of hsl axis maybe)

- improve and optimize shape path spreading
- range step improvement: maybe generic step function
  - e.g. fibonacci multiplier or whatever
- make algorithm to create voronoi inside a shape
  - improve voronoi to be contained inside shape
- make some generative algorithms that create shapes according to some
  pattern or something...
- add lines?

colour scheme:
list -> list -> leaf, leaf, leaf
     -> list -> leaf, leaf, leaf
     -> list -> leaf, leaf, leaf

basic primitive for colour is one of these (handled as possible range/random):
"blue"
"#1f09ff"
"?:#1f09ff:#43249f"
"#1f09ff:#43249f/10"
"blue,red,yellow,#9843bb" (<- list, but no range items supported within list)

to define how colours are applied to list/leaf shapes:
[[<primitive-1>, <primitive-2>], [<primitive-3>]]
The items in the innermost list are targeted to leafs:
leaf-1 : primitive-1
leaf-2 : primitive-2
leaf-3 : primitive-1 <- list has two primitives, so it starts over
leaf-4 (the next list) : primitive-3
leaf-5 : primitive-3

So, the lists of colours matches the list structure of the shapes.
e.g:
["blue,green,yellow"] => leafs on the same list get these
[["blue"],["green"],["yellow"]] => leafs on the first list gets blue, second green...

How about: a big range that does not get reset between the lists?


DONE:
- spread shape path
- spread function (x is generic value/range -> f(x) returns point)
- playground size definitions: pg.HEIGHT & pg.WIDTH
- $CX = center X, $CY = center Y
- fix clumsy area spread outside of area: define area boundaries (take from pg)
- random within colour range
- series value, fibonacci
- function value with generic kwargs
  "args": {"x": y, ...}
- function improvement for getting shape as parameter
  - syntax for adding current shape into the argument list of a function
  - settled for "shape-arg": true
- new functionality: field vector
  - needs to be applied after spreading
- simple voronoi
- improved colour ranges
- make colour ranges work within a list of colours
- spread-polar


values:
x = integer
x.y = float
?:m:n = random between m-n integers or floats
m:n:s = range between m-n with step s
m:n/s = range between m-n divided into s steps
%x%value = x percents of a value
#rrggbb:#rrggbb/s = colour range
?:#rrggbb:#rrggbb/s = random in the colour range (syntax requires step, not used)
[x, y, z] = list
f:str = function where str is evaluated with parameter x (depending no the algorithm)
!:str = series where str is evaluated and should result object with get() method
